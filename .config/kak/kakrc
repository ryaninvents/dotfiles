set -add global autoinfo normal

set-option global tabstop 2
set-option global indentwidth 2
set-option global scrolloff 1,3

add-highlighter global/ number-lines -hlcursor
add-highlighter global/ wrap -word -indent

# Language server

# @see https://discuss.kakoune.com/t/unsure-how-to-get-kak-lsp-working-with-typescript-react-tsx-files/2338
hook global BufCreate .*[.](ts|tsx) %{
    set buffer filetype typescript
}


eval %sh{kak-lsp --kakoune -s $kak_session}
set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
lsp-enable

source "~/.config/kak/rmk-fzf/rmk-fzf.kak"

map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object e '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'
